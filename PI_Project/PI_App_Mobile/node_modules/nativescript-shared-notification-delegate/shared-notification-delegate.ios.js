"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var shared_notification_delegate_common_1 = require("./shared-notification-delegate.common");
function createDeferedPromise() {
    var deferred = {
        promise: undefined,
        reject: undefined,
        resolve: undefined
    };
    deferred.promise = new Promise(function (resolve, reject) {
        deferred.resolve = resolve;
        deferred.reject = reject;
    });
    return deferred;
}
function createStopNextPromise() {
    var deferred = createDeferedPromise();
    return __assign({}, deferred, { next: function () { return deferred.resolve(false); }, stop: function () { return deferred.resolve(true); } });
}
var SharedNotificationDelegateImpl = (function (_super) {
    __extends(SharedNotificationDelegateImpl, _super);
    function SharedNotificationDelegateImpl() {
        var _this = _super.call(this) || this;
        _this._observers = [];
        _this.disableUnhandledWarning = false;
        if (SharedNotificationDelegateImpl.isUNUserNotificationCenterAvailable()) {
            _this.delegate = UNUserNotificationCenterDelegateImpl.initWithOwner(new WeakRef(_this));
            UNUserNotificationCenter.currentNotificationCenter().delegate = _this.delegate;
        }
        return _this;
    }
    SharedNotificationDelegateImpl.isUNUserNotificationCenterAvailable = function () {
        try {
            return !!UNUserNotificationCenter;
        }
        catch (ignore) {
            return false;
        }
    };
    SharedNotificationDelegateImpl.prototype.addObserver = function (observer, priority) {
        if (priority === void 0) { priority = 100; }
        if (observer.observerUniqueKey != null) {
            this.removeObserverByUniqueKey(observer.observerUniqueKey);
        }
        this._observers.push({ observer: observer, priority: priority });
        this.sortObservers();
    };
    SharedNotificationDelegateImpl.prototype.removeObserver = function (observer) {
        this._observers = this._observers.filter(function (v) { return v.observer !== observer; });
    };
    SharedNotificationDelegateImpl.prototype.removeObserverByUniqueKey = function (key) {
        if (key == null) {
            console.log("SharedNotificationDelegate Warning: tried to remove null/undefined keys.");
            return;
        }
        this._observers = this._observers.filter(function (v) { return v.observer.observerUniqueKey !== key; });
    };
    SharedNotificationDelegateImpl.prototype.clearObservers = function () {
        this._observers = [];
    };
    SharedNotificationDelegateImpl.prototype.sortObservers = function () {
        this._observers.sort(function (a, b) { return a.priority > b.priority ? 1 : (a.priority < b.priority ? -1 : 0); });
    };
    return SharedNotificationDelegateImpl;
}(shared_notification_delegate_common_1.SharedNotificationDelegateCommon));
exports.SharedNotificationDelegateImpl = SharedNotificationDelegateImpl;
var UNUserNotificationCenterDelegateImpl = (function (_super) {
    __extends(UNUserNotificationCenterDelegateImpl, _super);
    function UNUserNotificationCenterDelegateImpl() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    UNUserNotificationCenterDelegateImpl.new = function () {
        if (UNUserNotificationCenterDelegateImpl.ObjCProtocols.length === 0 && typeof (UNUserNotificationCenterDelegate) !== "undefined") {
            UNUserNotificationCenterDelegateImpl.ObjCProtocols.push(UNUserNotificationCenterDelegate);
        }
        return _super.new.call(this);
    };
    UNUserNotificationCenterDelegateImpl.initWithOwner = function (owner) {
        var delegate = UNUserNotificationCenterDelegateImpl.new();
        delegate._owner = owner;
        return delegate;
    };
    UNUserNotificationCenterDelegateImpl.prototype.userNotificationCenterWillPresentNotificationWithCompletionHandler = function (center, notification, completionHandler) {
        var promise = Promise.resolve(false);
        var owner = this._owner.get();
        if (owner) {
            owner._observers.forEach(function (_a) {
                var observer = _a.observer;
                if (observer.userNotificationCenterWillPresentNotificationWithCompletionHandler) {
                    promise = promise.then(function (skip) {
                        if (skip) {
                            return true;
                        }
                        var defPromise = createStopNextPromise();
                        var childHandler = function (p1) {
                            defPromise.stop();
                            completionHandler(p1);
                        };
                        try {
                            observer.userNotificationCenterWillPresentNotificationWithCompletionHandler(center, notification, childHandler, defPromise.next);
                        }
                        catch (ignore) {
                            defPromise.next();
                        }
                        return defPromise.promise;
                    });
                }
            });
            promise.then(function (handled) {
                if (!handled) {
                    completionHandler(0);
                }
                return true;
            });
        }
    };
    UNUserNotificationCenterDelegateImpl.prototype.userNotificationCenterOpenSettingsForNotification = function (center, notification) {
        var promise = Promise.resolve(false);
        var owner = this._owner.get();
        if (owner) {
            owner._observers.forEach(function (_a) {
                var observer = _a.observer;
                if (observer.userNotificationCenterOpenSettingsForNotification) {
                    promise = promise.then(function (skip) {
                        if (skip) {
                            return true;
                        }
                        var defPromise = createStopNextPromise();
                        try {
                            observer.userNotificationCenterOpenSettingsForNotification(center, notification, defPromise.stop, defPromise.next);
                        }
                        catch (ignore) {
                            defPromise.next();
                        }
                        return defPromise.promise;
                    });
                }
            });
        }
    };
    UNUserNotificationCenterDelegateImpl.prototype.userNotificationCenterDidReceiveNotificationResponseWithCompletionHandler = function (center, response, completionHandler) {
        var promise = Promise.resolve(false);
        var owner = this._owner.get();
        if (owner) {
            owner._observers.forEach(function (_a) {
                var observer = _a.observer;
                if (observer.userNotificationCenterDidReceiveNotificationResponseWithCompletionHandler) {
                    promise = promise.then(function (skip) {
                        if (skip) {
                            return true;
                        }
                        var defPromise = createStopNextPromise();
                        var childHandler = function () {
                            defPromise.stop();
                            completionHandler();
                        };
                        try {
                            observer.userNotificationCenterDidReceiveNotificationResponseWithCompletionHandler(center, response, childHandler, defPromise.next);
                        }
                        catch (ignore) {
                            defPromise.next();
                        }
                        return defPromise.promise;
                    });
                }
            });
            promise.then(function (handled) {
                if (!handled) {
                    if (!owner.disableUnhandledWarning) {
                        console.log("WARNING[shared-notification-delegate]: Notification was received but was not handled by any observer");
                    }
                    completionHandler();
                }
                return true;
            });
        }
    };
    UNUserNotificationCenterDelegateImpl.ObjCProtocols = [];
    return UNUserNotificationCenterDelegateImpl;
}(NSObject));
var instance = new SharedNotificationDelegateImpl();
exports.SharedNotificationDelegate = instance;
//# sourceMappingURL=shared-notification-delegate.ios.js.map